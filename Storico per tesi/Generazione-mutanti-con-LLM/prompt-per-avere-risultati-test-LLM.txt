Ora ti mando i miei codici html (tranne quello che viene mutato ogni volta che hai nel messaggio di sopra) e i test per ogni locatore, inoltre nelle foto ti allego una tabella che riporta per ogni locatore i test falliti in generale, stipulami una tabella dove per ogni locatore mi indichi il numero di test falliti per obsolescenza e i test falliti per fragilità del locatore. Al di sotto della tabella riportami una spiegazione per ogni scelta presa. Tieni conto che io per obsolescenza intendo che un test fallisce perché un elemento del test o non è più utilizzabile o non è più esistente e non che un locatore non riesce a trovare un elemento.

angular-example

codici html:

index.html:
<!doctype html>
<html lang="en" x-test-tpl-html-1>
<head x-test-hook-head-2>
  <meta charset="utf-8" x-test-hook-meta-3>
  <title x-test-hook-title-4>FrontendExample</title>
  <base href="/" x-test-hook-base-5>
  <meta name="viewport" content="width=device-width, initial-scale=1" x-test-hook-meta-6>
  <link rel="icon" type="image/x-icon" href="favicon.ico" x-test-hook-link-7>
</head>
<body x-test-hook-body-8>
  <app-root x-test-hook-app-root-9></app-root>
</body>
</html>


app.component.html:
<div class="app-container" x-test-tpl-div-1>
  <h1 x-test-hook-h1-2>{{ title }}</h1>
  <p x-test-hook-p-3>{{ welcomeMessage }}</p>
  <p x-test-hook-p-4>{{ description }}</p>

  <hr x-test-hook-hr-5>

  <h2 x-test-hook-h2-6>Compila il Form di Contatto</h2>
  <app-contact-form x-test-hook-app-contact-form-7></app-contact-form>

</div>


codici dei test:

package com.bbtutorials.users;

import org.openqa.selenium.chrome.ChromeOptions;
import java.util.concurrent.TimeUnit;
import org.testng.annotations.*;
import static org.testng.Assert.*;

// Aggiunto per screenshot
// Aggiunto per screenshot
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.File;
import org.apache.commons.io.FileUtils; // Aggiunto per FileUtils

import java.io.IOException; // Aggiunto per gestione eccezioni di I/O
import java.text.SimpleDateFormat; // Aggiunto per timestamp screenshot
import java.util.Date; // Aggiunto per timestamp screenshot
import java.util.NoSuchElementException;


public abstract class BaseTest {
  protected WebDriver driver;
  protected String baseUrl;
  protected boolean acceptNextAlert = true; // Potresti volerla rimuovere se non usata
  protected StringBuffer verificationErrors = new StringBuffer(); // Potresti volerla rimuovere se non usata
  protected JavascriptExecutor js;

  @BeforeClass(alwaysRun = true)
  public void setUp() throws Exception {
    System.setProperty("webdriver.chrome.driver", "/usr/local/bin/chromedriver");

    ChromeOptions options = new ChromeOptions();
    options.addArguments("--headless");
    options.addArguments("--disable-gpu");
    options.addArguments("--no-sandbox");
    options.addArguments("--disable-dev-shm-usage");
    options.addArguments("--window-size=1920,1080");

    driver = new ChromeDriver(options);
    baseUrl = "http://localhost:4200/";
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    js = (JavascriptExecutor) driver;
    driver.get(baseUrl);
  }

  // Aggiunto metodo per fare screenshot
  protected void takeScreenshot(String testName) {
    String screenshotPath = System.getProperty("screenshot.path", "target/screenshots"); // Fallback
  File screenshotDir = new File(screenshotPath); // Percorso dentro il container
    if (!screenshotDir.exists()) {
        screenshotDir.mkdirs(); // Crea le directory se non esistono
    }

    String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
    String filename = testName.replaceAll("[^a-zA-Z0-9.-]", "_") + "_" + timestamp + ".png"; // Rimuove caratteri non validi per il nome file
    File destFile = new File(screenshotDir, filename);

    try {
        if (driver instanceof TakesScreenshot) { // Verifica che il driver supporti gli screenshot
            File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(scrFile, destFile);
            System.out.println("Screenshot salvato in: " + destFile.getAbsolutePath());
        } else {
            System.err.println("Il driver corrente non supporta gli screenshot.");
        }
    } catch (WebDriverException e) {
        System.err.println("Errore WebDriver durante il salvataggio dello screenshot (potrebbe essere browser crashato): " + e.getMessage());
    } catch (IOException e) {
        System.err.println("Errore IO durante il salvataggio dello screenshot: " + e.getMessage());
    }
  }

  // Aggiunta la logica di screenshot nell'AfterMethod di TestNG
  @AfterMethod(alwaysRun = true)
  public void tearDownMethod(org.testng.ITestResult result) {
    if (driver != null && result.getStatus() == org.testng.ITestResult.FAILURE) {
        String testIdentifier = result.getMethod().getMethodName();
        // Se possibile, aggiungi informazioni sul mutante e sul locator type
        // Queste informazioni non sono facilmente accessibili da qui senza passare parametri,
        // ma il nome del metodo è già un buon punto di partenza.
        // Potresti passare il nome del mutante come parametro al metodo test (es. testUserCreationWithHooks(String mutantName))
        // e poi recuperarlo da result.getParameters() se volessi più dettaglio nel nome del file.
        takeScreenshot(testIdentifier);
    }
  }

  @AfterClass(alwaysRun = true)
  public void tearDown() throws Exception {
    if (driver != null) {
      driver.quit();
    }
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  // ... (metodi isElementPresent, isAlertPresent, closeAlertAndGetItsText rimangono invariati)
  protected boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  protected boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  protected String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class AbsoluteXPathTest extends BaseTest {
  @Test
  public void testContactFormAbsoluteXPath() throws Exception {
    // Campo Nome
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/div[1]/input[1]")).click();
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/div[1]/input[1]")).clear();
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/div[1]/input[1]")).sendKeys("AbsoluteFN");

    // Campo Email
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/div[2]/input[1]")).click();
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/div[2]/input[1]")).clear();
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/div[2]/input[1]")).sendKeys("absolute@example.com");

    // Bottone "Invia Messaggio"
    driver.findElement(By.xpath("/html/body/app-root/div[1]/app-contact-form[1]/div[1]/form[1]/button[1]")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class HookTest extends BaseTest {

  @Test
  public void testContactFormWithHooks() throws Exception {
    // Campo Nome
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-5]")).click();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-5]")).clear();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-5]")).sendKeys("HookNome");

    // Campo Email
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-8]")).click();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-8]")).clear();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-8]")).sendKeys("hook@example.com");

    // Bottone "Invia Messaggio"
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-button-9]")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class KatalonXPathTest extends BaseTest {
  @Test
  public void testContactFormKatalonXPath() throws Exception {
    // Campo Nome (usa id e label)
    driver.findElement(By.xpath("//input[@id='name']")).click();
    driver.findElement(By.xpath("//input[@id='name']")).clear();
    driver.findElement(By.xpath("//input[@id='name']")).sendKeys("KatalonNome");

    // Campo Email (usa id e label)
    driver.findElement(By.xpath("//input[@id='email']")).click();
    driver.findElement(By.xpath("//input[@id='email']")).clear();
    driver.findElement(By.xpath("//input[@id='email']")).sendKeys("katalon@example.com");

    // Bottone "Invia Messaggio" (usa testo e type)
    driver.findElement(By.xpath("//button[@type='submit']")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class RelativeXPathTest extends BaseTest {
  @Test
  public void testContactFormRelativeXPath() throws Exception {
    // Campo Nome (usa name attribute)
    driver.findElement(By.xpath("//input[@name='name']")).click();
    driver.findElement(By.xpath("//input[@name='name']")).clear();
    driver.findElement(By.xpath("//input[@name='name']")).sendKeys("RelativeNome");

    // Campo Email (usa name attribute)
    driver.findElement(By.xpath("//input[@name='email']")).click();
    driver.findElement(By.xpath("//input[@name='email']")).clear();
    driver.findElement(By.xpath("//input[@name='email']")).sendKeys("relative@example.com");

    // Bottone "Invia Messaggio" (usa testo)
    driver.findElement(By.xpath("//button[contains(text(), 'Invia Messaggio')]")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class RobulaXPathTest extends BaseTest {
  @Test
  public void testContactFormRobulaXPath() throws Exception {
    // Campo Nome (combina div class e input id)
    driver.findElement(By.xpath("//div[@class='form-group']/input[@id='name']")).click();
    driver.findElement(By.xpath("//div[@class='form-group']/input[@id='name']")).clear();
    driver.findElement(By.xpath("//div[@class='form-group']/input[@id='name']")).sendKeys("RobulaNome");

    // Campo Email (combina div class e input id, usando la posizione se necessario)
    driver.findElement(By.xpath("//div[@class='form-group'][2]/input[@id='email']")).click(); // Assumendo sia il secondo form-group
    driver.findElement(By.xpath("//div[@class='form-group'][2]/input[@id='email']")).clear();
    driver.findElement(By.xpath("//div[@class='form-group'][2]/input[@id='email']")).sendKeys("robula@example.com");

    // Bottone "Invia Messaggio" (usa form hook e type)
    driver.findElement(By.xpath("//form[@x-test-hook-form-2]/button[@type='submit']")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class SeleniumXPathTest extends BaseTest {
  @Test
  public void testContactFormSeleniumXPath() throws Exception {
    // Campo Nome (usa id)
    driver.findElement(By.id("name")).click();
    driver.findElement(By.id("name")).clear();
    driver.findElement(By.id("name")).sendKeys("SeleniumNome");

    // Campo Email (usa id)
    driver.findElement(By.id("email")).click();
    driver.findElement(By.id("email")).clear();
    driver.findElement(By.id("email")).sendKeys("selenium@example.com");

    // Bottone "Invia Messaggio" (usa CSS Selector)
    driver.findElement(By.cssSelector("button[type='submit']")).click();
  }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

angular-example-no-id

codici html:

index.html:
<!doctype html>
<html lang="en" x-test-tpl-html-1>
<head x-test-hook-head-2>
  <meta charset="utf-8" x-test-hook-meta-3>
  <title x-test-hook-title-4>FrontendExample</title>
  <base href="/" x-test-hook-base-5>
  <meta name="viewport" content="width=device-width, initial-scale=1" x-test-hook-meta-6>
  <link rel="icon" type="image/x-icon" href="favicon.ico" x-test-hook-link-7>
</head>
<body x-test-hook-body-8>
  <app-root x-test-hook-app-root-9></app-root>
</body>
</html>


app.component.html:
<div class="app-container" x-test-tpl-div-1>
  <h1 x-test-hook-h1-2>{{ title }}</h1>
  <p x-test-hook-p-3>{{ welcomeMessage }}</p>
  <p x-test-hook-p-4>{{ description }}</p>

  <hr x-test-hook-hr-5>

  <h2 x-test-hook-h2-6>Compila il Form di Contatto</h2>
  <app-contact-form x-test-hook-app-contact-form-7></app-contact-form>

</div>


codici dei test:

package com.bbtutorials.users;

import org.openqa.selenium.chrome.ChromeOptions;
import java.util.concurrent.TimeUnit;
import org.testng.annotations.*;
import static org.testng.Assert.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.File;
import org.apache.commons.io.FileUtils; // Aggiunto per FileUtils
import org.openqa.selenium.OutputType; // Aggiunto per screenshot
import org.openqa.selenium.TakesScreenshot; // Aggiunto per screenshot
import java.io.IOException; // Aggiunto per gestione eccezioni di I/O
import java.text.SimpleDateFormat; // Aggiunto per timestamp screenshot
import java.util.Date; // Aggiunto per timestamp screenshot
import java.util.NoSuchElementException;


public abstract class BaseTest {
  protected WebDriver driver;
  protected String baseUrl;
  protected boolean acceptNextAlert = true; // Potresti volerla rimuovere se non usata
  protected StringBuffer verificationErrors = new StringBuffer(); // Potresti volerla rimuovere se non usata
  protected JavascriptExecutor js;

  @BeforeClass(alwaysRun = true)
  public void setUp() throws Exception {
    System.setProperty("webdriver.chrome.driver", "/usr/local/bin/chromedriver");

    ChromeOptions options = new ChromeOptions();
    options.addArguments("--headless");
    options.addArguments("--disable-gpu");
    options.addArguments("--no-sandbox");
    options.addArguments("--disable-dev-shm-usage");
    options.addArguments("--window-size=1920,1080");

    driver = new ChromeDriver(options);
    baseUrl = "http://localhost:4200/";
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

    js = (JavascriptExecutor) driver;
    driver.get(baseUrl);
  }

  // Aggiunto metodo per fare screenshot
  protected void takeScreenshot(String testName) {
    String screenshotPath = System.getProperty("screenshot.path", "target/screenshots"); // Fallback
  File screenshotDir = new File(screenshotPath); // Percorso dentro il container
    if (!screenshotDir.exists()) {
        screenshotDir.mkdirs(); // Crea le directory se non esistono
    }

    String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
    String filename = testName.replaceAll("[^a-zA-Z0-9.-]", "_") + "_" + timestamp + ".png"; // Rimuove caratteri non validi per il nome file
    File destFile = new File(screenshotDir, filename);

    try {
        if (driver instanceof TakesScreenshot) { // Verifica che il driver supporti gli screenshot
            File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(scrFile, destFile);
            System.out.println("Screenshot salvato in: " + destFile.getAbsolutePath());
        } else {
            System.err.println("Il driver corrente non supporta gli screenshot.");
        }
    } catch (WebDriverException e) {
        System.err.println("Errore WebDriver durante il salvataggio dello screenshot (potrebbe essere browser crashato): " + e.getMessage());
    } catch (IOException e) {
        System.err.println("Errore IO durante il salvataggio dello screenshot: " + e.getMessage());
    }
  }

  // Aggiunta la logica di screenshot nell'AfterMethod di TestNG
  @AfterMethod(alwaysRun = true)
  public void tearDownMethod(org.testng.ITestResult result) {
    if (driver != null && result.getStatus() == org.testng.ITestResult.FAILURE) {
        String testIdentifier = result.getMethod().getMethodName();
        // Se possibile, aggiungi informazioni sul mutante e sul locator type
        // Queste informazioni non sono facilmente accessibili da qui senza passare parametri,
        // ma il nome del metodo è già un buon punto di partenza.
        // Potresti passare il nome del mutante come parametro al metodo test (es. testUserCreationWithHooks(String mutantName))
        // e poi recuperarlo da result.getParameters() se volessi più dettaglio nel nome del file.
        takeScreenshot(testIdentifier);
    }
  }

  @AfterClass(alwaysRun = true)
  public void tearDown() throws Exception {
    if (driver != null) {
      driver.quit();
    }
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  // ... (metodi isElementPresent, isAlertPresent, closeAlertAndGetItsText rimangono invariati)
  protected boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  protected boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  protected String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class AbsoluteXPathTest extends BaseTest {
  @Test
  public void testContactFormAbsoluteXPath() throws Exception {
    // Campo Nome
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/div[1]/label/input")).click();
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/div[1]/label/input")).clear();
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/div[1]/label/input")).sendKeys("AbsoluteFN");

    // Campo Email
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/div[2]/label/input")).click();
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/div[2]/label/input")).clear();
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/div[2]/label/input")).sendKeys("absolute@example.com");

    // Bottone "Invia Messaggio"
    driver.findElement(By.xpath("/html/body/app-root/div/app-contact-form/div/form/button")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class HookTest extends BaseTest {

  @Test
  public void testContactFormWithHooks() throws Exception {
    // Campo Nome
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-5]")).click();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-5]")).clear();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-5]")).sendKeys("HookNome");

    // Campo Email
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-8]")).click();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-8]")).clear();
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-input-8]")).sendKeys("hook@example.com");

    // Bottone "Invia Messaggio"
    driver.findElement(By.xpath("//*[@x-test-tpl-html-1]//*[@x-test-hook-app-root-9]//*[@x-test-tpl-div-1]//*[@x-test-hook-app-contact-form-7]//*[@x-test-tpl-div-1]//*[@x-test-hook-button-9]")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class KatalonXPathTest extends BaseTest {
  @Test
  public void testContactFormKatalonXPath() throws Exception {
    driver.findElement(By.xpath("//input[@name='name']")).click();
    driver.findElement(By.xpath("//input[@name='name']")).clear();
    driver.findElement(By.xpath("//input[@name='name']")).sendKeys("KatalonNome");

    driver.findElement(By.xpath("//div[2]/label/input")).click();
    driver.findElement(By.xpath("//div[2]/label/input")).clear();
    driver.findElement(By.xpath("//div[2]/label/input")).sendKeys("katalon@example.com");

    driver.findElement(By.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Email:'])[1]/following::button[1]")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class RelativeXPathTest extends BaseTest {
  @Test
  public void testContactFormRelativeXPath() throws Exception {
    driver.findElement(By.xpath("//input[@name='name']")).click();
    driver.findElement(By.xpath("//input[@name='name']")).clear();
    driver.findElement(By.xpath("//input[@name='name']")).sendKeys("RelativeNome");

    driver.findElement(By.xpath("//input[@name='email']")).click();
    driver.findElement(By.xpath("//input[@name='email']")).clear();
    driver.findElement(By.xpath("//input[@name='email']")).sendKeys("relative@example.com");

    driver.findElement(By.xpath("//button[text()='Invia Messaggio']")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class RobulaXPathTest extends BaseTest {
  @Test
  public void testContactFormRobulaXPath() throws Exception {
    driver.findElement(By.xpath("//label[contains(text(),'Nome:')]/input")).click();
    driver.findElement(By.xpath("//label[contains(text(),'Nome:')]/input")).clear();
    driver.findElement(By.xpath("//label[contains(text(),'Nome:')]/input")).sendKeys("RobulaNome");

    driver.findElement(By.xpath("//label[contains(text(),'Email:')]/input")).click(); 
    driver.findElement(By.xpath("//label[contains(text(),'Email:')]/input")).clear();
    driver.findElement(By.xpath("//label[contains(text(),'Email:')]/input")).sendKeys("robula@example.com");

    driver.findElement(By.xpath("//button[text()='Invia Messaggio']")).click();
  }
}


package com.bbtutorials.users;

import org.testng.annotations.Test;
import org.openqa.selenium.By;

public class SeleniumXPathTest extends BaseTest {
  @Test
  public void testContactFormSeleniumXPath() throws Exception {
    driver.findElement(By.xpath("//input[@name='name']")).click();
    driver.findElement(By.xpath("//input[@name='name']")).clear();
    driver.findElement(By.xpath("//input[@name='name']")).sendKeys("SeleniumNome");

    driver.findElement(By.xpath("//div[2]/label/input")).click();
    driver.findElement(By.xpath("//div[2]/label/input")).clear();
    driver.findElement(By.xpath("//div[2]/label/input")).sendKeys("selenium@example.com");

    driver.findElement(By.xpath("//button[contains(.,'Invia Messaggio')]")).click();
  }
}