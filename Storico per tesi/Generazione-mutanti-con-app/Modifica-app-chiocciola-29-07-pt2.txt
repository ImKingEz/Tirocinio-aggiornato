#### Riepilogo per la Tesi (Versione Corretta e Definitiva)

#### Contesto e Problema

L'integrazione del generatore di mutanti con progetti basati su Angular ha evidenziato un'incompatibilità critica legata alla gestione del carattere `@` da parte del parser HTML **Jsoup**. Il nuovo "control flow" di Angular utilizza il carattere `@` per introdurre blocchi sintattici (es. `@if`, `@for`). Di conseguenza, il compilatore di Angular interpreta ogni `@` presente nel template come l'inizio di un blocco. Se un `@` non è seguito da una parola chiave valida (es. in un testo come `<p>@username</p>`), il compilatore genera un errore fatale (`NG5002: Incomplete block`), bloccando la build.

Il problema è aggravato dal comportamento di Jsoup, che in fase di parsing normalizza tutte le entità HTML `&#64;` nel loro carattere letterale `@`. Questo rende impossibile distinguere a posteriori un `@` che era legittimamente nel codice sorgente da uno che era un'entità. Qualsiasi `@` presente nel DOM interno di Jsoup, indipendentemente dalla sua origine, viene scritto nel file mutato e può causare l'errore di compilazione.

#### Soluzione Adottata e Motivazioni

La soluzione consiste in una fase di **post-elaborazione intelligente** della stringa HTML generata, applicata subito prima del salvataggio del file. È stata implementata una sostituzione basata su **espressione regolare (regex)** che converte in entità HTML (`&#64;`) tutti i caratteri `@` che non fanno parte della sintassi del control flow di Angular.

**Modifica implementata in `Mutator.java`:**
```java
// Definizione della Regex per identificare gli '@' non validi
private static final Pattern ANGULAR_AT_SIGN_PATTERN = Pattern.compile(
    "@(?!(if|for|switch|defer|placeholder|loading|error|else)\\b)"
);

// Applicazione della Regex nel metodo saveMutant()
String mutantContent = ANGULAR_AT_SIGN_PATTERN.matcher(mutantContent).replaceAll("&#64;");
```

**Spiegazione Tecnica della Regex:**
*   `@`: Seleziona il carattere `@`.
*   `(?!(...))`: È un costrutto di "negative lookahead", che assicura che il match avvenga solo se il carattere `@` **non** è seguito dal pattern specificato tra parentesi.
*   `if|for|...|else`: L'elenco delle parole chiave del control flow di Angular.
*   `\\b`: È un "word boundary", un metacarattere che assicura che vengano considerate solo parole intere, evitando false negativi su parole come `@different`.

**Motivazioni della Scelta:**

*   **Completezza:** Questa soluzione risolve tutti i casi problematici, inclusi sia l'interpolazione (`@{{...}}`) sia il testo semplice (`@username`), che la soluzione precedente non copriva.
*   **Precisione:** L'uso del "negative lookahead" permette di escludere con precisione i costrutti sintattici validi di Angular, evitando di corrompere i blocchi di controllo `@if`, `@for`, ecc.
*   **Robustezza:** La soluzione è resiliente e centralizzata. Gestisce qualsiasi occorrenza di `@` generata dal processo di mutazione, garantendo che l'output finale sia sempre sintatticamente corretto per il compilatore Angular.

Questa strategia si è dimostrata la più efficace e completa, risolvendo l'incompatibilità in modo definitivo e garantendo la piena operatività del generatore di mutanti in ambiente Angular.